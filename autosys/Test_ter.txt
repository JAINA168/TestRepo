variable "cluster_name" {
  description = "The name of the ECS cluster"
  type        = string
}

variable "task_definition_family" {
  description = "The family of the ECS task definition"
  type        = string
}

resource "aws_ecs_cluster" "main" {
  name = var.cluster_name
}

resource "aws_ecs_task_definition" "main" {
  family                   = var.task_definition_family
  requires_compatibilities = ["FARGATE"]
  cpu                      = "2048"
  memory                   = "8192"
  network_mode             = "awsvpc"
  container_definitions    = jsonencode([
    {
      name      = "my-container"
      image     = "<image-url>"
      essential = true
      cpu       = 2048
      memory    = 8192
    }
  ])
}

variable "cluster_name" {
  description = "The name of the ECS cluster"
  type        = string
}

variable "task_definition_family" {
  description = "The family of the ECS task definition"
  type        = string
}

variable "alias_name" {
  description = "The alias name for the KMS key"
  type        = string
}

resource "aws_kms_key" "main" {
  description             = var.alias_name
  key_usage               = "ENCRYPT_DECRYPT"
  customer_master_key_spec = "SYMMETRIC_DEFAULT"

  lifecycle {
    prevent_destroy = true
  }
}

resource "aws_kms_alias" "main" {
  name          = var.alias_name
  target_key_id = aws_kms_key.main.id
}

variable "alias_name" {
  description = "The alias name for the KMS key"
  type        = string
}

variable "secret_names" {
  description = "List of secret names"
  type        = list(string)
}

resource "aws_secretsmanager_secret" "snowflake_control" {
  count       = length(var.secret_names) > 0 ? 1 : 0
  name        = element(var.secret_names, count.index)
}

resource "aws_secretsmanager_secret" "snowflake" {
  count       = length(var.secret_names) > 1 ? 1 : 0
  name        = element(var.secret_names, count.index + (length(var.secret_names) > 0 ? 1 : -1))
}

resource "aws_secretsmanager_secret" "salesforce" {
  count       = length(var.secret_names) > 2 ? 1 : 0
  name        = element(var.secret_names, count.index + (length(var.secret_names) > 1 ? 2 : -1))
}

variable "secret_names" {
  description = "List of secret names"
  type        = list(string)
}

variable "log_group_name" {
  description = "The name of the CloudWatch log group"
  type        = string
}

resource "aws_cloudwatch_log_group" "main" {
  name              = var.log_group_name
  retention_in_days = var.retention_days
}

variable "log_group_name" {
  description = "The name of the CloudWatch log group"
}

variable "retention_days" {
   description   = "Retention period in days for logs"
   default       = number(56)
}

module "ecr" {
  source = "git@github.com:YOUR_GITHUB_USERNAME/sfa-serverless-repl.git//modules/ecr"
  repo_name = "cuspf-sfa-serverless-repl-ecr-repo-prd"
}

module "ecs" {
  source = "git@github.com:YOUR_GITHUB_USERNAME/sfa-serverless-repl.git//modules/ecs"
  cluster_name = "cuspf-sfa-serverless-repl-seagen-full-ecs-cluster-prd"
  task_definition_family = "cuspf-sfa-serverless-repl-seagen-full-ecs-task-prd"
}

module "kms" {
  source = "git@github.com:YOUR_GITHUB_USERNAME/sfa-serverless-repl.git//modules/kms"
  alias_name = "alias/cuspf-sfa-serverless-repl-kms-seagen-prd"
}

module "secrets_manager" {
  source = "git@github.com:YOUR_GITHUB_USERNAME/sfa-serverless-repl.git//modules/secrets_manager"
  secret_names = ["prd/repl-seagen-control/snowflake", "prd/repl-seagen/snowflake", "prd/repl-seagen/salesforce"]
}

module "cloudwatch" {
  source = "git@github.com:YOUR_GITHUB_USERNAME/sfa-serverless-repl.git//modules/cloudwatch"
  log_group_name = "cuspf-sfa-serverless-repl-seagen-lg-prd"
  retention_days = 56
}

variable "cluster_name" {
  description = "The name of the ECS cluster"
  type        = string
}

variable "task_definition_family" {
  description = "The family of the ECS task definition"
  type        = string
}

variable "cpu" {
  description = "CPU units for the task"
  type        = string
}

variable "memory" {
  description = "Memory for the task in MiB"
  type        = string
}

resource "aws_ecs_cluster" "main" {
  name = var.cluster_name
}

resource "aws_ecs_task_definition" "main" {
  family                   = var.task_definition_family
  requires_compatibilities = ["FARGATE"]
  cpu                      = var.cpu
  memory                   = var.memory
  network_mode             = "awsvpc"
}

variable "cluster_name" {
  description = "The name of the ECS cluster"
}

variable "task_definition_family" {
  description = "The family of the ECS task definition"
}

variable "cpu" {
  description = "CPU units for the task"
}

variable "memory" {
  description = "Memory for the task in MiB"
}

variable “step_function_role_name”{
   description   ="Name of Step Function Role”
   type          ="string”
}

resource “aws_iam_role” “step_function_role”{
   name               ="var.step_function_role_name”
   assume_role_policy= jsonencode({
      Version         ="2012-10-17”
      Statement       =[{
         Effect       ="Allow”
         Principal    ={Service="states.amazonaws.com”}
         Action       ="sts:AssumeRole”
      }]
   })
}

// Define policies and attachments similarly with variables for flexibility.

variable “step_function_role_name”{
   description   ="Name of Step Function Role”
}

// Define other necessary variables.

variable "secret_names" {
  description = "List of secret names"
  type        = list(string)
}

resource "aws_secretsmanager_secret" "secret" {
  count       = length(var.secret_names)
  name        = element(var.secret_names, count.index)
}

module "ecr" {
  source = "git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git//modules/ecr"
  repo_name = "cuspf-sfa-serverless-repl-ecr-repo-prd"
}

module "ecs" {
  source = "git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git//modules/ecs"
  cluster_name = "cuspf-sfa-serverless-repl-seagen-full-ecs-cluster-prd"
  task_definition_family = "cuspf-sfa-serverless-repl-seagen-full-ecs-task-prd"
  cpu = "2048"
  memory = "8192"
}

module "kms" {
  source = "git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git//modules/kms"
  alias_name = "alias/cuspf-sfa-serverless-repl-kms-seagen-prd"
}

module "secrets_manager" {
  source = "git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git//modules/secrets_manager"
  secret_names = [
    "prd/repl-seagen-control/snowflake",
    "prd/repl-seagen/snowflake",
    "prd/repl-seagen/salesforce"
  ]
}

module "cloudwatch" {
  source = "git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git//modules/cloudwatch"
  log_group_name = "cuspf-sfa-serverless-repl-seagen-lg-prd"
  retention_days = 56
}

variable "step_function_role_name" {
  description = "Name of the Step Function Role"
  type        = string
}

variable "step_function_policy_name" {
  description = "Name of the Step Function Policy"
  type        = string
}

resource "aws_iam_role" "step_function_role" {
  name               = var.step_function_role_name
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Principal = { Service = "states.amazonaws.com" }
      Action = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_policy" "step_function_policy" {
  name   = var.step_function_policy_name
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = [
          "ecs:DescribeTasks",
          "ecs:ListClusters",
          "ecs:DescribeClusters",
          "events:PutEvents",
          "states:StartExecution",
          "batch:SubmitJob",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "secretsmanager:GetSecretValue"
        ]
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "step_function_policy_attach" {
  role       = aws_iam_role.step_function_role.name
  policy_arn = aws_iam_policy.step_function_policy.arn
}

variable "ecs_execution_role_name" {
  description = "Name of the ECS Execution Role"
  type        = string
}

variable "ecs_execution_policy_name" {
  description = "Name of the ECS Execution Policy"
  type        = string
}

resource "aws_iam_role" "ecs_execution_role" {
  name               = var.ecs_execution_role_name
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Principal = { Service = "ecs-tasks.amazonaws.com" }
      Action = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_policy" "ecs_execution_policy" {
  name   = var.ecs_execution_policy_name
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = [
          "s3:GetObject",
          // Add other necessary actions
        ]
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "ecs_execution_policy_attach" {
  role       = aws_iam_role.ecs_execution_role.name
  policy_arn = aws_iam_policy.ecs_execution_policy.arn
}

variable "bucket_name" {
  description = "The name of the S3 bucket"
  type        = string
}

resource "aws_s3_bucket" "main" {
  bucket = var.bucket_name
}

module "step_function_role" {
  source                  ="git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git//modules/step_function_role"
  step_function_role_name ="CUSPF-sfa-serverless-repl-seagen-step-functions-role"
  step_function_policy_name="CUSPF-step-function-policy"
}

module “ecs_execution_role”{
   source                  ="git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git//modules/ecs_execution_role”
   ecs_execution_role_name ="CUSPF-sfa-serverless-repl-seagen-ecs-task-exec-role”
   ecs_execution_policy_name="CUSPF-ecs-execution-policy”
}

module “s3”{
   source     ="git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git//modules/s3”
   bucket_name="cuspf-sfa-serverless-repl-seagen-prd”
}

module “cloudwatch”{
   source         ="git@github.com:YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git//modules/cloudwatch”
   log_group_name ="cuspf-sfa-serverless-repl-seagen-lg-prd”
}

